{"version":3,"sources":["components/Card.js","components/GameBoard.js","components/ScoreBoard.js","cardsData.js","App.js","index.js"],"names":["Carad","card","flipCard","className","onClick","id","style","transform","flipped","value","GameBoard","cards","map","ScoreBoard","gameWon","score","matched","sort","Math","random","App","useState","deck","setCards","selectedCards","setSelectedCards","setGameWon","setScore","useEffect","length","setTimeout","checkCards","firstCard","secondCard","hasGameBeenWon","forEach","newCards","newDeck","newCard","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.8b6289c2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function Carad({ card, flipCard }) {\n  return (\n    <div className=\"card\" onClick={() => flipCard(card.id)}>\n      <div\n        className=\"card-inner\"\n        style={{ transform: card.flipped ? \"rotateY(180deg)\" : null }}\n      >\n        <div className=\"card-back\">{card.value}</div>\n        <div className=\"card-front\">‚ù§Ô∏è</div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Card from \"./Card\";\n\nexport default function GameBoard({ cards, flipCard }) {\n  return (\n    <div className=\"board\">\n      {cards.map((card) => {\n        return <Card card={card} flipCard={flipCard} />;\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function ScoreBoard({ gameWon, score }) {\n  return (\n    <div className=\"score-board\">\n      {gameWon ? (\n        <h2 className=\"score-board-score winner\">üèÜYOU WINüèÜ</h2>\n      ) : (\n        <h2 className=\"score-board-score\">SCORE: {score} </h2>\n      )}\n    </div>\n  );\n}\n","const cards = [\n  {\n    value: \"üòÇ\",\n    flipped: false,\n    id: 1\n  },\n  {\n    value: \"üçÄ\",\n    flipped: false,\n    id: 2\n  },\n  {\n    value: \"üåª\",\n    flipped: false,\n    id: 3\n  },\n  {\n    value: \"üåà\",\n    flipped: false,\n    id: 4\n  },\n  {\n    value: \"üê∏\",\n    flipped: false,\n    id: 5\n  },\n  {\n    value: \"üê±\",\n    flipped: false,\n    id: 6\n  },\n  {\n    value: \"üê∂\",\n    flipped: false,\n    id: 7\n  },\n  {\n    value: \"ü•®\",\n    flipped: false,\n    id: 8\n  },\n  {\n    value: \"üåØ\",\n    flipped: false,\n    id: 9\n  },\n  {\n    value: \"üòç\",\n    matched: false,\n    flipped: false,\n    id: 10\n  },\n  {\n    value: \"üòÇ\",\n    flipped: false,\n    id: 11\n  },\n  {\n    value: \"üçÄ\",\n    flipped: false,\n    id: 12\n  },\n  {\n    value: \"üåª\",\n    flipped: false,\n    id: 13\n  },\n  {\n    value: \"üåà\",\n    flipped: false,\n    id: 14\n  },\n  {\n    value: \"üê∏\",\n    flipped: false,\n    id: 15\n  },\n  {\n    value: \"üê±\",\n    flipped: false,\n    id: 16\n  },\n  {\n    value: \"üê∂\",\n    flipped: false,\n    id: 17\n  },\n  {\n    value: \"ü•®\",\n    flipped: false,\n    id: 18\n  },\n  {\n    value: \"üåØ\",\n    flipped: false,\n    id: 19\n  },\n  {\n    value: \"üòç\",\n    flipped: false,\n    id: 20\n  }\n];\n\n// This shuffles the cards every time.\nexport default cards.sort(() => Math.random() - 0.5);\n","import React, { useState, useEffect } from \"react\";\nimport GameBoard from \"./components/GameBoard\";\nimport ScoreBoard from \"./components/ScoreBoard\";\n\nimport \"./styles.css\";\nimport deck from \"./cardsData\";\n\nexport default function App() {\n  const [cards, setCards] = useState(deck);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [gameWon, setGameWon] = useState(false);\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    if (selectedCards.length === 2) {\n      setTimeout(checkCards, 500);\n    }\n  }, [selectedCards]);\n\n  const checkCards = () => {\n    const [firstCard, secondCard] = selectedCards;\n    if (firstCard.value === secondCard.value) {\n      let hasGameBeenWon = true;\n      cards.forEach((card) =>\n        !card.flipped ? (hasGameBeenWon = false) : null\n      );\n      setGameWon(hasGameBeenWon);\n    } else {\n      const newCards = cards.map((card) => {\n        if (card.id === firstCard.id || card.id === secondCard.id) {\n          const newCard = { ...card, flipped: false };\n          return newCard;\n        } else {\n          return card;\n        }\n      });\n      setCards(newCards);\n      setScore(score + 1);\n    }\n    setSelectedCards([]);\n  };\n\n  // flip a card over\n  const flipCard = (id) => {\n    //find the card and set flipped to true\n    const newDeck = cards.map((card) => {\n      if (card.id === id && !card.flipped) {\n        const newCard = { ...card, flipped: true };\n        setSelectedCards([...selectedCards, newCard]);\n        return newCard;\n      } else {\n        return card;\n      }\n    });\n\n    setCards(newDeck);\n  };\n\n  //When a card is flipped over, we want to check if another card is flipped\n  //if another card is flipped, check to see  if they are all the same card.\n  //if not flip them both back over\n  //invrement score by one.\n  // if so, keep them both flipped\n\n  //Game over when all cards flipped/matched\n  return (\n    <div className=\"App\">\n      <h1>Emoji Match Up!</h1>\n      <ScoreBoard gameWon={gameWon} score={score} />\n      <h2>{gameWon ? ` Final Score ${score}!` : null}</h2>\n      <GameBoard cards={cards} flipCard={flipCard} />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}